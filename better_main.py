from feeders import BatchFeeder3D, TestBatchFeederfrom better_rnn import RNNModelimport tensorflow as tfimport numpy as npbatch_feeder = BatchFeeder3D()batch_feeder.set_user_max_train_max_value()# setting rnnrnn = RNNModel()test_feeder = TestBatchFeeder()test_feeder.set_user_max_train_max_value()def config_tensorboard(session):    log_directory = "/home/shayan/shayancode/tensorboard_directory"    writer = tf.summary.FileWriter(log_directory)    writer.add_graph(session.graph)    return writerdef config_to_cpu():    config = tf.ConfigProto(device_count={'GPU': 0})    session = tf.InteractiveSession(config=config)    return sessionsess = tf.InteractiveSession()# sess = config_to_cpu()sess.run(tf.global_variables_initializer())sess.run(tf.local_variables_initializer())batch_size = 64writer = config_tensorboard(sess)merged_summary = tf.summary.merge_all()seq_length = np.ones([batch_feeder.batch_size]) * batch_feeder.UNROLL_SIZEfor i in range(100000):    input_gap, input_session_length, user_numbers, output_gap, \    output_session_length, input_session_exact_day, \    input_session_exact_hour = batch_feeder.create_batch()    lstm_input_state_c, lstm_input_state_h = batch_feeder.get_states()    session_out = sess.run(        [rnn.optimization_step, rnn.sumOfLoss, rnn.number_of_each_genre_prediction, rnn.time_prediction, rnn.lstm_ouput_c, rnn.lstm_ouput_h],        feed_dict={rnn.input_time: input_gap,                   rnn.users_indices: user_numbers,                   rnn.input_session_length: input_session_length,                   rnn.output_real_counter: output_session_length,                   rnn.time_target: output_gap,                   rnn.exact_day: input_session_exact_day,                   rnn.exact_hour: input_session_exact_hour,                   rnn.lstm_input_c: lstm_input_state_c,                   rnn.lstm_input_h: lstm_input_state_h,                   rnn.sequence_length: seq_length                   })    output_c, output_h = session_out[4:]    batch_feeder.set_states(output_c, output_h)    if i % 200 == 0:        input_gap, input_session_length, user_numbers, output_gap, \        output_session_length, input_session_exact_day, \        input_session_exact_hour = batch_feeder.create_batch()        lstm_input_state_c, lstm_input_state_h = batch_feeder.get_states()        s = sess.run([merged_summary, rnn.pm1, rnn.pm2, rnn.g1, rnn.g2, rnn.real_loss_1, rnn.real_loss_2, rnn.lstm_ouput_c, rnn.lstm_ouput_h],                     feed_dict={rnn.input_time: input_gap,                                rnn.users_indices: user_numbers,                                rnn.input_session_length: input_session_length,                                rnn.output_real_counter: output_session_length,                                rnn.time_target: output_gap,                                rnn.exact_day: input_session_exact_day,                                rnn.exact_hour: input_session_exact_hour,                                rnn.lstm_input_c: lstm_input_state_c,                                rnn.lstm_input_h: lstm_input_state_h,                                rnn.sequence_length:seq_length                                })        output_c, output_h = s[7:]        batch_feeder.set_states(output_c, output_h)        writer.add_summary(s[0], i)        print("iteration ", i)        print("loss mean : ", session_out[1])        print("MAE 1", s[5], "MAE 2", s[6])        print("estimated gap: ", s[1], "estimated session counter", s[2])        print("real gap: ", s[3], "real session counter", s[4])        # print("loss1 :", loss[1])    if i % 2000 == 800:        test_feeder.reset_testing()        MAE1 = []        MAE2 = []        first_time = 1        users_c, users_h = batch_feeder.get_last_lstm_state()        test_feeder.set_lstm_states(users_c, users_h)        while test_feeder.next_batch_is_avaialbe():            input_gap, input_session_length, user_numbers, output_gap, \            output_session_length, input_session_exact_day, \            input_session_exact_hour = test_feeder.create_batch()            lstm_input_state_c, lstm_input_state_h = test_feeder.get_states()            s = sess.run([merged_summary, rnn.pm1, rnn.pm2, rnn.g1, rnn.g2, rnn.real_loss_1, rnn.real_loss_2, rnn.lstm_ouput_c, rnn.lstm_ouput_h],                         feed_dict={rnn.input_time: input_gap,                                    rnn.users_indices: user_numbers,                                    rnn.input_session_length: input_session_length,                                    rnn.output_real_counter: output_session_length,                                    rnn.time_target: output_gap,                                    rnn.exact_day: input_session_exact_day,                                    rnn.exact_hour: input_session_exact_hour,                                    rnn.lstm_input_c: lstm_input_state_c,                                    rnn.lstm_input_h: lstm_input_state_h,                                    rnn.sequence_length: seq_length                                    })            output_c, output_h = s[7:]            test_feeder.set_states(output_c, output_h)            MAE1.append(s[5])            MAE2.append(s[6])        print("iteration ", i)        print("MAE 1", np.array(MAE1).mean(),              "MAE 2", np.array(MAE2).mean())